
Design A Ad-Hoc Donation Website  


Feature

- The website will only exist for 24 hr
- Payments / Transaction Processing
- Global payment without conversion fee?
- Payment methods supported?
- Payment Processing and Connection to External Processor
- Show the total amount of donation
- Financial Reporting?


Design Goal
- High volume of Traffic within 24 hr
- Website is highly available within the 24 hr
- High reliability
    - Money that a user donate will not be loss. 
    - Should not over charge a user / Avoid double payment
- Transactions proceessing does not need to be finished within 24 hr.



Two Phase Commit for Distributed Transactions?

How to achieve eventual consistency?
- Read repair
- Write repair
- Asynchronous repair

Idempotency Requests: https://stripe.com/docs/api/idempotent_requests
- How to design idempotency key? 
    - An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. 
    - Use V4 UUIDs or another random string with enough entropy to avoid collisions
- How servers handle idempotency requests?
- Retry mechanism
    - Auto-retry mechanism
    - Error responses are classified as “retryable” or “non-retryable”


How would clients recover if it failed to consume the response? 
What if the response was lost or the client timed out
What about race-conditions resulting in a user clicking “Donate” twice?


How to maintain tables of idempotency information?
- Read and written from a sharded master database

- Scaling Airbnb’s Payment Platform      https://medium.com/airbnb-engineering/scaling-airbnbs-payment-platform-43ebfc99b324
- Avoiding Double Payments in a Distributed Payments System    https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb
